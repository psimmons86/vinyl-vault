<%- include('../partials/header') %>

<div class="container mx-auto px-4 py-6">
    <!-- Search Header -->
    <div class="sticky top-16 bg-white dark:bg-gray-800 z-30 pb-4 border-b border-gray-200 dark:border-gray-700">
        <!-- Search Bar -->
        <div class="relative mb-4">
            <div class="relative">
                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400">
                    <span class="material-icons">search</span>
                </span>
                <input type="text" 
                       id="search" 
                       value="<%= query %>" 
                       class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 focus:ring-2 focus:ring-primary dark:focus:ring-primary-light"
                       placeholder="Search users by username, name, or bio..."
                       autocomplete="off">
            </div>
            <!-- Search Suggestions -->
            <div class="search-suggestions absolute w-full mt-1 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 hidden divide-y divide-gray-200 dark:divide-gray-700"></div>
        </div>

        <!-- Filters -->
        <div class="flex items-center space-x-4">
            <select id="filter" class="rounded-lg border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 px-4 py-2">
                <option value="all" <%= filter === 'all' ? 'selected' : '' %>>All Users</option>
                <option value="collectors" <%= filter === 'collectors' ? 'selected' : '' %>>Collectors (50+ Records)</option>
                <option value="active" <%= filter === 'active' ? 'selected' : '' %>>Recently Active</option>
                <option value="new" <%= filter === 'new' ? 'selected' : '' %>>New Users</option>
            </select>
        </div>
    </div>

    <!-- Results -->
    <div id="searchResults" class="mt-6"></div>
    
    <!-- Pagination -->
    <div id="pagination" class="flex justify-center mt-8 space-x-1"></div>
</div>

<template id="userCardTemplate">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm overflow-hidden mb-4">
        <div class="p-4">
            <!-- User Info -->
            <div class="flex items-start space-x-4">
                <img src="" alt="" class="w-24 h-24 sm:w-32 sm:h-32 rounded-full flex-shrink-0">
                <div class="flex-grow min-w-0">
                    <div class="flex items-center space-x-2 mb-2">
                        <h3 class="text-xl sm:text-2xl font-medium truncate"></h3>
                        <span class="hidden px-2 py-0.5 text-sm font-medium bg-primary text-white dark:bg-primary-light dark:text-gray-900 rounded-full admin-badge">Admin</span>
                    </div>
                    <p class="text-gray-600 dark:text-gray-400 text-base sm:text-lg line-clamp-2 mb-3 bio"></p>
                    <div class="flex items-center space-x-4 text-base sm:text-lg text-gray-500 dark:text-gray-400">
                        <span class="flex items-center space-x-1">
                            <span class="material-icons text-sm">album</span>
                            <span class="record-count"></span>
                            <span>records</span>
                        </span>
                        <span class="flex items-center space-x-1">
                            <span class="material-icons text-sm">calendar_today</span>
                            <span class="joined-date"></span>
                        </span>
                    </div>
                </div>
            </div>
            
            <!-- Recent Records -->
            <div class="mt-4">
                <h4 class="text-sm font-medium text-gray-900 dark:text-gray-100 mb-2">Recent Records</h4>
                <div class="grid grid-cols-3 gap-2 records-grid"></div>
            </div>
        </div>
        
        <!-- Actions -->
        <div class="px-4 py-3 bg-gray-50 dark:bg-gray-700/50 border-t border-gray-200 dark:border-gray-700">
            <a href="" class="inline-flex items-center text-primary dark:text-primary-light hover:text-primary-dark dark:hover:text-primary view-profile">
                <span>View Profile</span>
                <span class="material-icons ml-1 text-sm">arrow_forward</span>
            </a>
        </div>
    </div>
</template>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search');
    const filterSelect = document.getElementById('filter');
    const resultsContainer = document.getElementById('searchResults');
    const paginationContainer = document.getElementById('pagination');
    const suggestionsContainer = document.querySelector('.search-suggestions');
    
    let currentPage = 1;
    let searchTimeout;
    let lastQuery = '';

    // Handle search input
    searchInput.addEventListener('input', function() {
        const query = this.value.trim();
        
        // Show suggestions if 2 or more characters
        if (query.length >= 2) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                fetchSuggestions(query);
            }, 300);
        } else {
            suggestionsContainer.style.display = 'none';
        }
        
        // Perform search if query changes
        if (query !== lastQuery) {
            lastQuery = query;
            currentPage = 1;
            performSearch();
        }
    });

    // Handle filter changes
    filterSelect.addEventListener('change', function() {
        currentPage = 1;
        performSearch();
    });

    // Close suggestions when clicking outside
    document.addEventListener('click', function(e) {
        if (!suggestionsContainer.contains(e.target) && e.target !== searchInput) {
            suggestionsContainer.style.display = 'none';
        }
    });

    // Fetch user suggestions
    async function fetchSuggestions(query) {
        try {
            const response = await fetch(`/search/api/users/suggest?q=${encodeURIComponent(query)}`);
            const users = await response.json();
            
            if (users.length > 0) {
                suggestionsContainer.innerHTML = users.map(user => `
                    <div class="flex items-center space-x-3 px-4 py-2 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer suggestion-item" data-username="${user.username}">
                        <img src="${user.avatar || '/images/default-avatar.png'}" 
                             alt="${user.username}" 
                             class="w-8 h-8 rounded-full">
                        <span class="text-gray-900 dark:text-gray-100">${user.username}</span>
                    </div>
                `).join('');
                
                suggestionsContainer.style.display = 'block';
                
                // Handle suggestion clicks
                suggestionsContainer.querySelectorAll('.suggestion-item').forEach(item => {
                    item.addEventListener('click', function() {
                        searchInput.value = this.dataset.username;
                        suggestionsContainer.style.display = 'none';
                        performSearch();
                    });
                });
            } else {
                suggestionsContainer.style.display = 'none';
            }
        } catch (error) {
            console.error('Error fetching suggestions:', error);
        }
    }

    // Perform search
    async function performSearch() {
        const query = searchInput.value.trim();
        const filter = filterSelect.value;
        
        try {
            const response = await fetch(
                `/search/api/users?q=${encodeURIComponent(query)}&filter=${filter}&page=${currentPage}`
            );
            const data = await response.json();
            
            displayResults(data.users);
            updatePagination(data.page, data.totalPages);
        } catch (error) {
            console.error('Error performing search:', error);
            resultsContainer.innerHTML = `
                <div class="bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 p-4 rounded-lg text-center">
                    <span class="material-icons mb-2">error_outline</span>
                    <p>Error performing search. Please try again.</p>
                </div>
            `;
        }
    }

    // Display search results
    function displayResults(users) {
        if (users.length === 0) {
            resultsContainer.innerHTML = `
                <div class="text-center py-8 text-gray-500 dark:text-gray-400">
                    <span class="material-icons text-4xl mb-2">search_off</span>
                    <p>No users found matching your search.</p>
                </div>
            `;
            return;
        }

        resultsContainer.innerHTML = '';
        const template = document.getElementById('userCardTemplate');
        
        users.forEach(user => {
            const card = template.content.cloneNode(true);
            
            // Set user info
            const img = card.querySelector('img');
            img.src = user.avatar || '/images/default-avatar.png';
            img.alt = user.username;
            card.querySelector('h3').textContent = user.username;
            card.querySelector('.bio').textContent = user.bio || 'No bio provided';
            card.querySelector('.record-count').textContent = user.recordCount || 0;
            card.querySelector('.joined-date').textContent = 
                new Date(user.createdAt).toLocaleDateString('en-US', { 
                    month: 'short', 
                    year: 'numeric' 
                });
            
            // Show admin badge if applicable
            if (user.isAdmin) {
                card.querySelector('.admin-badge').classList.remove('hidden');
            }
            
            // Set profile link
            card.querySelector('.view-profile').href = `/users/${user.username}`;
            
            // Add recent records
            const recordsGrid = card.querySelector('.records-grid');
            if (user.recentRecords && user.recentRecords.length > 0) {
                recordsGrid.innerHTML = user.recentRecords.map(record => `
                    <div class="aspect-square rounded overflow-hidden bg-gray-100 dark:bg-gray-900" title="${record.title} - ${record.artist}">
                        <img src="${record.imageUrl || '/images/default-album.png'}" 
                             alt="${record.title}"
                             class="w-full h-full object-cover">
                    </div>
                `).join('');
            } else {
                recordsGrid.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">No records yet</p>';
            }
            
            resultsContainer.appendChild(card);
        });
    }

    // Update pagination
    function updatePagination(currentPage, totalPages) {
        if (totalPages <= 1) {
            paginationContainer.innerHTML = '';
            return;
        }

        const pages = [];
        
        // Previous button
        pages.push(`
            <button data-page="${currentPage - 1}" 
                    class="p-2 rounded-lg ${currentPage === 1 ? 'text-gray-400 dark:text-gray-600 cursor-not-allowed' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'}"
                    ${currentPage === 1 ? 'disabled' : ''}>
                <span class="material-icons">chevron_left</span>
            </button>
        `);
        
        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            if (
                i === 1 || 
                i === totalPages || 
                (i >= currentPage - 2 && i <= currentPage + 2)
            ) {
                pages.push(`
                    <button data-page="${i}" 
                            class="px-3 py-1 rounded-lg ${i === currentPage 
                                ? 'bg-primary text-white dark:bg-primary-light dark:text-gray-900' 
                                : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'}">
                        ${i}
                    </button>
                `);
            } else if (
                i === currentPage - 3 || 
                i === currentPage + 3
            ) {
                pages.push(`
                    <span class="px-2 text-gray-400 dark:text-gray-600">...</span>
                `);
            }
        }
        
        // Next button
        pages.push(`
            <button data-page="${currentPage + 1}" 
                    class="p-2 rounded-lg ${currentPage === totalPages ? 'text-gray-400 dark:text-gray-600 cursor-not-allowed' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'}"
                    ${currentPage === totalPages ? 'disabled' : ''}>
                <span class="material-icons">chevron_right</span>
            </button>
        `);
        
        paginationContainer.innerHTML = pages.join('');
        
        // Add click handlers
        paginationContainer.querySelectorAll('button[data-page]').forEach(button => {
            button.addEventListener('click', function(e) {
                if (!this.hasAttribute('disabled')) {
                    currentPage = parseInt(this.dataset.page);
                    performSearch();
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }
            });
        });
    }

    // Initial search if query exists
    if (searchInput.value.trim()) {
        performSearch();
    }
});
</script>

<%- include('../partials/footer') %>
